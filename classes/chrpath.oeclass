## Rewrites ELF rpath.
##
## Strip of ELF rpath from machine recipe output, and rewrite ELF rpath
## in all other recipe types to be relocatable using $ORIGIN relative paths.
## TBD.

addtask chrpath after install before split

META_EMIT_PREFIX += "chrpath:CHRPATH chrpath:MACHINE_CHRPATH"

inherit rpath
do_chrpath[import] = "chrpath_get_cmd"

CHRPATH_DIRS = "${base_bindir} ${bindir} ${base_sbindir} ${sbindir} \
        ${base_libdir} ${libdir} ${base_sharedlibdir} ${sharedlibdir} \
        ${libexecdir}"

CHRPATH_REPLACE_DIRS			= "${CHRPATH_DIRS}"
CHRPATH_STRIP_DIRS			= ""

## @useflag chrpath_machine_strip When this flag is set, rpaths will be
##          stripped from elf files of machine recipes.  When this flag is not
##          set, rpath in elf files of machine recipes will be replaced with
##          $ORIGIN relative paths.
CLASS_FLAGS += "chrpath_machine_strip"
DEFAULT_USE_chrpath_machine_strip = "1"
MACHINE_CHRPATH_REPLACE_DIRS:USE_chrpath_machine_strip	= ""
MACHINE_CHRPATH_STRIP_DIRS:USE_chrpath_machine_strip	= "${CHRPATH_DIRS}"
MACHINE_CHRPATH_REPLACE_DIRS		= "${CHRPATH_DIRS}"
MACHINE_CHRPATH_STRIP_DIRS		= ""
CHRPATH_REPLACE_DIRS:machine		= "${MACHINE_CHRPATH_REPLACE_DIRS}"
CHRPATH_STRIP_DIRS:machine		= "${MACHINE_CHRPATH_STRIP_DIRS}"

CHRPATH_REPLACE_STAGEDIRS:native	= "1"
CHRPATH_REPLACE_STAGEDIRS:cross		= "1"
CHRPATH_REPLACE_STAGEDIRS:sdk-cross	= "1"

do_chrpath[dirs] = "${D}"
def do_chrpath(d):
    import stat
    import oelite.magicwrap

    filemagic = oelite.magicwrap.open()
    filemagic.load()

    replace_stagedirs = d.get("CHRPATH_REPLACE_STAGEDIRS")
    stage_dir = d.get('STAGE_DIR')
    install_dir = d.get('D')

    def chrpath_dir(dir, recursive=False, replace=False):
        if not os.path.exists(dir):
            return True
        assert os.path.isdir(dir)
        for file in os.listdir(dir):
            path = os.path.join(dir, file)
            if os.path.islink(path):
                continue
            if os.path.isdir(path):
                if recursive:
                    chrpath_dir(path, recursive, replace)
                continue
            chrpath = chrpath_get_cmd(d,filemagic.file(path))
            if not chrpath:
                continue
            mode = os.stat(path)[stat.ST_MODE]
            if os.access(path, os.W_OK|os.R_OK):
                mode = None
            else:
                os.chmod(path, mode|stat.S_IRWXU)
            if replace:
                cmd = [chrpath, '-l', path]
                old_rpath = oelite.util.shcmd(cmd, quiet=True,
                                              silent_errorcodes=[2])
                if not old_rpath:
                    continue
                dirparts = len(os.path.dirname(path).split('/'))
                origin_root = '$ORIGIN/' + '/'.join(['..'] * dirparts)
                if ' RUNPATH=' in old_rpath:
                    rpath_prefix = 'RUNPATH='
                else:
                    rpath_prefix = 'RPATH='
                old_rpath = old_rpath[
                    old_rpath.index(rpath_prefix) + len(rpath_prefix):].strip()
                rpaths = []
                for rpath in old_rpath.split(':'):
                    if rpath.startswith('$ORIGIN'):
                        rpaths.append(rpath)
                        continue
                    if rpath.startswith(stage_dir):
                        if not replace_stagedirs:
                            continue
                        rpath = rpath.replace(stage_dir, origin_root + "/..")
                    rpath = rpath.replace(install_dir, origin_root)
                    # FIXME: remove DT_RUNPATH?  probably needs chrpath patch
                    rpaths.append(rpath)
                unique_rpaths = []
                for rpath in rpaths:
                    if not rpath.startswith("$ORIGIN"):
                        rpath = origin_root + rpath
                    if not rpath in unique_rpaths:
                        unique_rpaths.append(rpath)
                new_rpath = ':'.join(unique_rpaths)
                if new_rpath == old_rpath:
                    continue
                cmd = [chrpath, '-r', new_rpath, path]
                rc = oelite.util.shcmd(cmd)
                if not rc:
                    print 'ERROR: chrpath replace failed: %s'%(path)
                    return False
            else:
                cmd = [chrpath, "-d", path]
                rc = oelite.util.shcmd(cmd)
                if not rc:
                    print 'ERROR: chrpath delete failed: %s'%(path)
                    return False
            if mode:
                os.chmod(path, mode)
        return True

    stripdirs = d.get("CHRPATH_STRIP_DIRS").split()
    for dir in stripdirs:
        recursive=False
        if dir.endswith("//"):
            recursive=True
        dir = dir.strip("/")
        rc = chrpath_dir(dir, recursive, replace=False)
        if not rc:
            return rc

    replacedirs = d.get("CHRPATH_REPLACE_DIRS").split()
    for dir in replacedirs:
        if dir in stripdirs:
            continue
        recursive=False
        if dir.endswith("//"):
            recursive=True
        dir = dir.strip("/")
        rc = chrpath_dir(dir, recursive, replace=True)
        if not rc:
            return rc

    filemagic.close()
    return

# Local Variables:
# mode: python
# End:
