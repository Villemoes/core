## Class for version setting based on .git state in topdir
##
## See @recipe base-version. If USE flag manifest_version is set, looks in
## oe-lite top dir and checks the git "state" and inserts that into the version
## file in the build rootfs.
##
## @useflag manifest_version_dirty_mark Custom string to append if manifest is
##          dirty.
## @useflag manifest_version_strip_leading If set, the leading prefix
##          specified by this flag will be stripped if the version string (tag)
##          is starting with the prefix followed by a decimal number.
## @useflag manifest_version_tag_match If set, only tags matching this glob(7)
##          will be used.  If not set, but USE_manifest_version_strip_leading
##          is set, only tags starting with that will be used.  If not set and
##          USE_manifest_version_strip_leading is not set, all tags will be
##          considered..
## @useflag manifest_version_cmd If set, this is used as the entire
##          command to execute to produce the version. The string is
##          interpreted by "sh -c", so some quoting may be necessary.
##          If this is set, none of the above USE flags have any
##          effect.

CLASS_DEPENDS += "native:git"
__dont_cache = True

CLASS_FLAGS += "manifest_version_dirty_mark manifest_version_strip_leading"
CLASS_FLAGS += "manifest_version_tag_match manifest_version_cmd"
DEFAULT_USE_manifest_version_dirty_mark = "-dirty"

addhook manifest_version to post_recipe_parse
def manifest_version(d):
    import subprocess
    os.chdir(d.get("TOPDIR"))
    version = None
    cmd = d.get("USE_manifest_version_cmd", expand=False)
    if cmd:
        sub = subprocess.Popen(cmd, shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err) = sub.communicate()
        if sub.returncode == 0:
            version = out.strip()
        else:
            sys.stderr.write("Command '%s' failed: %s" % (cmd, err))
            version = None
    elif os.path.exists(".git"):
        strip_leading = d.get("USE_manifest_version_strip_leading")
        tag_match = d.get("USE_manifest_version_tag_match")
        if strip_leading and not tag_match:
            tag_match = strip_leading + "*"
        cmd = ["git", "describe", "--always",
               "--dirty="+d.get("USE_manifest_version_dirty_mark")]
        if tag_match:
            cmd.append("--match=" + tag_match)
        sub = subprocess.Popen(cmd,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        version = sub.communicate()[0].strip()
        if sub.returncode != 0:
            version = None
        elif (strip_leading and re.match('%s\d'%(strip_leading), version)):
            # Strip away leading prefix
            version = version[len(strip_leading):]
    if version is None and os.path.exists("VERSION"):
        version = open("VERSION").readline().strip()
    if version is None:
        version = "unknown"
    d.set("OESTACK_VERSION", version)
    return

# Local Variables:
# mode: python
# End:
